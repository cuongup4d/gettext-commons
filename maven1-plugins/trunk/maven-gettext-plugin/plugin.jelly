<?xml version="1.0"?>

<!-- 
/*
 * Maven Gettext Plugin
 *
 * Copyright 2005 Steffen Pingel
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 -->

<project 
  xmlns:j="jelly:core"
  xmlns:util="jelly:util"
  xmlns:ant="jelly:ant"
  xmlns:doc="doc">

  <!--==================================================================-->
  <!-- Default goal that invokes gettext:merge and gettext:dist         -->
  <!--==================================================================-->
  <goal name="gettext">
    <attainGoal name="gettext:merge"/>
	<attainGoal name="gettext:dist"/>
  </goal>
  
  <!--==================================================================-->
  <!-- Calls xgettext                                                   -->
  <!--==================================================================-->
  <goal name="gettext:gettext">
    <ant:fileScanner var="files">
	  <ant:fileset dir="${gettext.sourceDirectory}" id="sources.files">
	    <ant:include name="**/*.java"/>
	  </ant:fileset>
	</ant:fileScanner>

	<ant:echo>Invoking xgettext for Java files in '${gettext.sourceDirectory}'</ant:echo>
	<ant:exec
	  executable="${gettext.xgettext}">
	  <!-- failonerror="true"/> -->
	  <ant:arg value="--from-code=${gettext.encoding}"/>
      <ant:arg value="--output=${gettext.keysFile}"/>
      <ant:arg value="--language=Java"/>
	  <ant:arg line="${gettext.keywords}"/>
	  <j:forEach var="file" items="${files.iterator()}">
	    <ant:arg value="${file}"/>
	  </j:forEach>
    </ant:exec>
  </goal>

  <!--==================================================================-->
  <!-- Calls msgmerge                                                   -->
  <!--==================================================================-->
  <goal name="gettext:merge" prereqs="gettext:gettext">
    <ant:fileScanner var="files">
	  <ant:fileset dir="${gettext.poDirectory}">
	    <ant:include name="**/*.po"/>
	  </ant:fileset>
	</ant:fileScanner>

	<ant:echo>Invoking msgmerge for po files in '${gettext.poDirectory}'</ant:echo>
	<j:forEach var="file" items="${files.iterator()}">
	  <ant:exec
	    executable="${gettext.msgmerge}">
	    <!-- failonerror="true"/> -->
        <ant:arg value="-q"/>
	    <ant:arg value="--backup=numbered"/>
        <ant:arg value="-U"/>
	    <ant:arg value="${gettext.keysFile}"/>
	    <ant:arg value="${file}"/>
      </ant:exec>
	</j:forEach>
  </goal>

  <!--==================================================================-->
  <!-- Calls msgfmt or mgscat                                           -->
  <!--==================================================================-->
  <goal name="gettext:dist">
    <j:set var="outputformat" value="${gettext.outputFormat}"/>
    <j:choose>
	  <j:when test="${outputformat == 'class'}">
	    <attainGoal name="gettext:dist-msgfmt"/>
      </j:when>
	  <j:otherwise>
	    <attainGoal name="gettext:dist-msgcat"/>
	  </j:otherwise>
    </j:choose>
  </goal>

  <!--==================================================================-->
  <!-- Internal goal, sets a few variables                              -->
  <!--==================================================================-->
  <goal name="gettext:prepare-dist">
    <ant:fileScanner var="files">
	  <ant:fileset dir="${gettext.poDirectory}">
	    <ant:include name="**/*.po"/>
	  </ant:fileset>
	</ant:fileScanner>

	<j:set var="package" value="${gettext.package}"/>
	<j:set var="basepath" value="${package.replace('.', '/')}"/>
  </goal>

  <!--==================================================================-->
  <!-- Calls msgfmt                                                     -->
  <!--==================================================================-->
  <goal name="gettext:dist-msgfmt" prereqs="gettext:prepare-dist">
	<ant:echo>Invoking msgfmt for po files in '${gettext.poDirectory}'</ant:echo>
    <j:set var="javaversion" value="${gettext.javaversion}"/>
	<j:forEach var="file" items="${files.iterator()}">
      <j:set var="index" value="${file.name.lastIndexOf('.')}"/>
      <j:set var="basename" value="${file.name.substring(0,index)}"/>
	  <ant:exec
	    executable="${gettext.msgfmt}">
	    <!-- failonerror="true"/> -->
		<j:choose>
  		  <j:when test="${javaversion == 2}">
		    <ant:arg value="--java2"/>
          </j:when>
		  <j:otherwise>
		    <ant:arg value="--java"/>
		  </j:otherwise>
        </j:choose>
        <ant:arg value="-d"/>
	    <ant:arg value="${gettext.outputDirectory}"/>
	    <ant:arg value="-r"/>
	    <ant:arg value="${gettext.package}"/>
	    <ant:arg value="-l"/>
	    <ant:arg value="${basename}"/>
	    <ant:arg value="${file}"/>
      </ant:exec>
	</j:forEach>

    <attainGoal name="gettext:create-source-code-bundle"/>
  </goal>

  <!--==================================================================-->
  <!-- Calls msgcat                                                     -->
  <!--==================================================================-->
  <goal name="gettext:dist-msgcat" prereqs="gettext:prepare-dist">
	<ant:echo>Invoking msgcat for po files '${gettext.poDirectory}'</ant:echo>
	<j:forEach var="file" items="${files.iterator()}">
      <j:set var="index" value="${file.name.lastIndexOf('.')}"/>
      <j:set var="basename" value="${file.name.substring(0,index)}"/>
      <util:file var="target" name="${gettext.outputDirectory}/${basepath}_${basename}.properties"/>
	  <ant:exec
	    executable="${gettext.msgcat}">
	    <!-- failonerror="true"/> -->
        <ant:arg value="--no-location"/>
	    <ant:arg value="-p"/>
	    <ant:arg value="${file}"/>
        <ant:arg value="-o"/>
	    <ant:arg value="${target}"/>
      </ant:exec>
	</j:forEach>

    <attainGoal name="gettext:create-source-code-bundle"/>
  </goal>

  <!--==================================================================-->
  <!-- Creates the source code locale bundle                            -->
  <!--==================================================================-->
  <goal name="gettext:create-source-code-bundle">
	<util:file var="resourceFile" name="${gettext.outputDirectory}/${basepath}_${gettext.sourceLocale}.properties"/>
	<ant:echo>Creating resource bundle for source locale</ant:echo>
	<j:if test="${!resourceFile.exists()}">
	  <j:expr value="${resourceFile.createNewFile()}"/>
    </j:if>

	<util:file var="resourceFile" name="${gettext.outputDirectory}/${basepath}.properties"/>
	<ant:echo>Creating default resource bundle</ant:echo>
	<j:if test="${!resourceFile.exists()}">
	  <j:expr value="${resourceFile.createNewFile()}"/>
    </j:if>
  </goal>

</project>
